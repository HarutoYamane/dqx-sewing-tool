generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Roles {
  USER // ユーザー
  ADMIN // 管理者
}

// enumの定義
enum ArmorParts {
  HEAD       // 頭
  BODY_UPPER // 体上
  BODY_LOWER // 体下
  ARMS       // 腕
  LEGS       // 足
}

enum ClothTypes {
  REBIRTH // 再生布
  RAINBOW // 虹布
  HEART // 会心布
  NORMAL // 通常
}

enum Strengths {
  STRONGEST // 最強
  STRONGER // 強い
  NORMAL // 普通
  WEAK // 弱い
  UNKNOWN // ？
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  imageUrl  String?
  authId    String    @unique
  role      Roles     @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // リレーション
  favorites        Favorite[]
  results          Result[]
  weeklyArmorStats WeeklyArmorStats[]
}

model ArmorSeries {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  lv       Int
  imageUrl String

  // リレーション
  armors Armor[]
}

model Armor {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  parts         ArmorParts  // enumを使用
  armorSeriesId Int
  imageUrl      String
  lv            Int

  // リレーション
  armorSeries     ArmorSeries      @relation(fields: [armorSeriesId], references: [id])
  favorites       Favorite[]
  sewing          Sewing?
  results         Result[]
  weeklyArmorStats WeeklyArmorStats[]
}

model Sewing {
  id           Int      @id @default(autoincrement())
  armorId      Int      @unique // 1対1の関係
  clothType    ClothTypes
  strength     Strengths[]
  settingValue Int[]

  // リレーション
  armor Armor @relation(fields: [armorId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    String
  armorId   Int
  createdAt DateTime @default(now())

  // リレーション
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  armor Armor @relation(fields: [armorId], references: [id], onDelete: Cascade)

  // 複合ユニーク制約
  @@unique([userId, armorId])
}

model Result {
  id        Int      @id @default(autoincrement())
  userId    String
  armorId   Int
  threeStar Int     @default(0)
  mistake   Int     @default(0)
  total     Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  armor Armor @relation(fields: [armorId], references: [id], onDelete: Cascade)

  // 複合ユニーク制約
  @@unique([userId, armorId])
}

model WeeklyArmorStats {
  id        Int      @id @default(autoincrement())
  userId    String
  armorId   Int
  createdAt DateTime @default(now())

  // リレーション
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  armor Armor @relation(fields: [armorId], references: [id], onDelete: Cascade)

  // 複合ユニーク制約（同じユーザーが同じ防具を複数回作成することを防ぐ）
  @@unique([userId, armorId])

  // インデックス（防具IDでの検索を高速化）
  @@index([armorId])
}